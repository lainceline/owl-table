//(function () {
	var OwlInput = React.createClass({
		displayName: 'OwlInput',
		propTypes: {
			column: React.PropTypes.object.isRequired,
			value: React.PropTypes.node,
			row: React.PropTypes.object
		},
		inputDidChange: function (event) {
			event.persist();
			this.debouncedInputChange(event);
		},
		debouncedInputChange: _.debounce(function (event) {
			var node = $(this.getDOMNode());
			var props = this.props;

			node.trigger('owlTableUpdated', [props.column, props.row, event.target.value]);
		}, 500),
		render: function () {
			var props = this.props;

			var input;
			var options = props.column.options;

			var self = this;

			switch (props.column.type) {
				case 'text':
				case 'number':
					input = React.createElement("input", {type: props.column.type, defaultValue: props.value, onChange: self.inputDidChange});
					break;
				case 'select':
				case 'select_multiple':
					var optionList = options.map(function (option, index) {
						return (
							React.createElement("option", {value: option.value}, 
								option.text
							)
						);
					});
					input = React.createElement("select", {value: props.value}, 
								optionList
							);
					break;
				default:
					break;
			}

			return input;
		}
	});
//})();

var OwlCell = React.createClass({
	displayName: 'OwlCell',
	propTypes: {
		column: React.PropTypes.object.isRequired,
		row: React.PropTypes.object,
		open: React.PropTypes.bool,
		editable: React.PropTypes.bool
	},
	getDefaultProps: function () {
		return {
			open: false,
			editable: true
		};
	},
	render: function () {
		var props = this.props;
		var content = React.createElement("span", {className: "owl-cell-value-label"}, props.row[props.column.field]);

		props.editable = props.column.editable || true;

		if (props.open === true) {
			content = React.createElement(OwlInput, {column: props.column, value: props.row[props.column.field], row: props.row, tableDidChange: props.tableDidChange});
		}

		return (
			React.createElement("td", {'data-field': props.column.field}, 
				props.editable === true ? content : (props.row[props.column.field] || '---')
			)
		);
	}
});

var OwlRow = React.createClass({
	displayName: 'OwlRow',
	propTypes: {
		data: React.PropTypes.object.isRequired,
		columns: React.PropTypes.array.isRequired
	},
	getInitialState: function () {
		return {
			open: false
		};
	},
	clickHandler: function (event) {
		this.setState({open: true});
	},
	render: function () {
		var props = this.props;
		var state = this.state;

		var handler = this.clickHandler;

		var cells = props.columns.map(function (column, index) {
			return (
				React.createElement(OwlCell, {column: column, row: props.data, open: state.open, key: index, tableDidChange: props.tableDidChange})
			);
		});

		return(
			React.createElement("tr", {className: "owl-row", key: props.key, onClick: this.clickHandler}, 
				cells
			)
		);
	}
});

var OwlTableReact = React.createClass({
	displayName: 'OwlTable',
	propTypes: {
		data: React.PropTypes.array.isRequired,
		columns: React.PropTypes.array.isRequired
	},
	getInitialState: function () {
		return {
			changedData: {}
		};
	},
	componentDidMount: function () {
		var self = this;

		$(self.getDOMNode()).on('owlTableUpdated', function (event, column, row, value) {
			var newChangedData = self.state.changedData;

			newChangedData[row.id] = row;

			newChangedData[row.id][column.field] = value;

			self.setState({
				changedData: newChangedData
			});

			// This will set event.result to the changed row, so when the event
			// bubbles up to the angular controller we can save it.
			return row;
		});
	},
	render: function () {
		var props = this.props;

		var headers = props.columns.map(function (column, index) {
			return (
				React.createElement("th", {key: index, 'data-field': column.field}, 
					column.title || 'None'
				)
			);
		});

		var self = this;

		var rows = props.data.map(function (datum, index) {
			return (
				React.createElement(OwlRow, {data: datum, columns: props.columns, key: index, tableDidChange: self.tableDidChange})
			);
		});

		return (
			React.createElement("table", {className: "owl-table"}, 
				React.createElement("thead", null, 
					headers
				), 
				React.createElement("tbody", null, 
					rows
				)
			)
		);
	}
});

(function(module) {
try {
  module = angular.module('owlTablePartials');
} catch (e) {
  module = angular.module('owlTablePartials', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('partials/export.html',
    '<div class="owl-export-controls"><span class="owl-control-label">Export:</span><span class="owl-export-buttons"><span class="owl-export-button-csv"></span><span class="owl-export-button-print"></span></span></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('owlTablePartials');
} catch (e) {
  module = angular.module('owlTablePartials', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('partials/filter.html',
    '<div class="owl-filter-controls"><span class="owl-control-label">Filters:</span><span class="owl-filter-buttons">OFF</span></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('owlTablePartials');
} catch (e) {
  module = angular.module('owlTablePartials', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('partials/pagination.html',
    '<div class="owl-pagination-buttons active"><button ng-click="owlCtrl.prevPage()" class="owl-pagination-button owl-previous-page">&lt; Prev</button><div class="owl-page-count">Page <input type="text" size="3" ng-model="owlCtrl.owlTable.page">&nbsp;&nbsp;of {{owlCtrl.owlTable.pages}}</div><button ng-click="owlCtrl.nextPage()" class="owl-pagination-button owl-next-page">Next &gt;</button></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('owlTablePartials');
} catch (e) {
  module = angular.module('owlTablePartials', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('partials/table.html',
    '<div class="container-fluid owl-wrapper"><div class="owl-top-controls"><owl-pagination></owl-pagination><owl-export-controls></owl-export-controls><owl-filter-controls></owl-filter-controls><button id="saveButton" ng-click="saveButtonClicked()" class="btn btn-sm btn-default">Save</button></div><div class="owl-table-wrapper table-responsive"><div class="owl-table-inner-wrapper"><div class="owl-react-container"></div></div></div><owl-pagination></owl-pagination></div>');
}]);
})();

angular.module(
	'owlTable',
	[
		'owlTablePartials'
	]
);

(function () {
	angular.module('owlTable').constant('owlConstants', {
		defaults: {
			PER_PAGE: 25
		}
	});
})();

function owlTableService ($rootScope, owlConstants) {
	var service = {};

	service.tables = [];

	service.page = 1;
	service.pages = 1;
	service.total = 0;
	service.count = owlConstants.defaults.PER_PAGE;

	service.registerTable = function (id) {
		this.tables.push({ id: id });
	};

	service.tableWithId = function (id) {
		return this.tables.map(function (table) {
			if (table.id === id) {
				return table;
			}
		});
	};

	service.setCount = function (count) {
		this.count = count;
		$rootScope.$broadcast('owlCountChanged');
	};

	service.nextPage = function () {
		if (this.page < this.pages) {
			this.page += 1;
		}
	};

	service.prevPage = function () {
		if (this.page > 1) {
			this.page -= 1;
		}
	};

	// enables client-side pagination.
	service.paginate = function (settings) {

		if (typeof(settings.count) !== 'undefined') {
			this.count = settings.count;
		}

		this.pages = Math.ceil(settings.total / this.count);
		this.total = settings.total;
	};

	return service;
}

angular.module('owlTable').service('owlTableService', ['$rootScope', 'owlConstants', owlTableService]);

function owlTableDirective ($http, owlTableService) {
	return {
		restrict: 'EA',
		scope: {
			data: '=',
			columns: '=',
			save: '@'
		},
		templateUrl: 'partials/table.html',
		controllerAs: 'owlCtrl',
		compile: function (tElem, tAttrs) {
			owlTableService.registerTable(tElem[0].id);

			return function link (scope, elem, attrs) {
				var table;
				var rendered;
				var container = elem.find('.owl-react-container')[0];

				table = React.createElement(OwlTableReact, {
					data: scope.data,
					columns: scope.columns
				});

				rendered = React.render(table, container);

				scope.$watchCollection('data', function (newValue, oldValue) {
					console.log('watch called');
					if (newValue !== oldValue) {
						console.log('and we are updating table');
						rendered.setProps({
							data: scope.owlCtrl.dataForPage(owlTableService.page)
						});
					}
				});

				elem.on('owlTableUpdated', function (event) {
					var updatedRow = event.result;

					// Could ajax the saved row to the server here.

					// Put it into the scope.data array. Is this ugly? Yes.
					$.grep(scope.data, function (e) { return e.id === updatedRow.id; })[0] = updatedRow;

					event.stopPropagation();
				});

				scope.saveButtonClicked = function (event) {
					scope.saving = true;

					// Should abstract this into a service or delegate it to user provided thing
					$http({
						method: 'post',
						url: scope.save,
						data: {
							data: rendered.state.changedData
						}
					}).then(function (response) {
						scope.saving = false;
						console.log('save successful');
					});

					rendered.setState({
						changedData: {}
					});
				};

				scope.owlCtrl.nextPage = function () {
					owlTableService.nextPage();
					// set the table state to the data for the new page.
					rendered.setProps({
						data: scope.owlCtrl.dataForPage(owlTableService.page)
					});
				};
			};
		},
		controller: function ($scope) {
			this.owlTable = owlTableService;

			this.prevPage = function () {
				owlTableService.prevPage();
				$scope.data = this.dataForPage(owlTableService.page);
			};

			this.dataForPage = function (page) {
				//beginning: the page number times the count - 1 ex. 25 for page 2 with default count
				//end: the page number times the count -1 ex. 49 for page 2 with default count
				console.log(page);
				var data = $scope.data.slice(((page - 1) * 25), ((page * 25) - 1));
				console.log($scope.data);
				return data;
			};
		}
	};
}

function owlPagination (owlTableService) {
	return {
		restrict: 'EA',
		require: '^owlTable',
		templateUrl: 'partials/pagination.html',
		compile: function (tElem, tAttrs) {
			return function link (scope, elem, attrs) {

			};
		}
	};
}

function owlFilterControls (owlTableService) {
	return {
		restrict: 'EA',
		require: '^owlTable',
		templateUrl: 'partials/filter.html',
		compile: function (tElem, tAttrs) {
			return function link (scope, elem, attrs) {};
		}
	};
}

function owlExportControls (owlTableService) {
	return {
		restrict: 'EA',
		require: '^owlTable',
		templateUrl: 'partials/export.html',
		compile: function (tElem, tAttrs) {
			return function link (scope, elem, attrs) {};
		}
	};
}

angular.module('owlTable')
	.directive('owlTable', ['$http', 'owlTableService', owlTableDirective])
	.directive('owlPagination', ['owlTableService', owlPagination])
	.directive('owlFilterControls', ['owlTableService', owlFilterControls])
	.directive('owlExportControls', ['owlTableService', owlExportControls]);
